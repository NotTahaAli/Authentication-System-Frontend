---
import Layout from "../layouts/Layout.astro";
import Group from "../components/Group.astro";
import Button from "../components/Button.astro";
import Field from "../components/Field.astro";
import Link from "../components/Link.astro";
import { isAuthenticated } from "../functions/isAuthenticated";
import NotificationLayout from "../layouts/NotificationLayout.astro";

const jwt = isAuthenticated(Astro.cookies);
if (!jwt) {
	return Astro.redirect("/login");
}
let localError: string | undefined = undefined;
let data;
try {
	const resp = await fetch(import.meta.env.BACKEND_URL + "/user", {
		headers: {
			Authorization: jwt.value,
			"x-vercel-protection-bypass": import.meta.env.VERCEL_BYPASS_KEY
		},
	});
	if (resp.ok) {
		data = (await resp.json()).message;
	} else {
		return Astro.redirect("/logout");
	}
} catch (err) {
	if (err && typeof err == "string") {
		localError = err;
	} else if (
		err &&
		typeof err == "object" &&
		!Array.isArray(err) &&
		"message" in err &&
		typeof err.message == "string"
	) {
		localError = err.message;
	} else {
		localError = "Uknown Error Occured.";
	}
}
---
{localError ? 
<NotificationLayout
		title="AuthSys | My Profile"
		heading="AuthSys"
		link="/profile"
		buttonText="Try Again"
	>An Error Occured While Loading this Page: {localError}</NotificationLayout>
: 
<Layout title="AuthSys | My Profile" useCaptcha={false} heading="AuthSys" useAuthn={true}>
	<div class="containerDiv">
		<Field
			id="emailField"
			type="email"
			name="email"
			placeholder="Email"
			value={data.email}
			disabled={true}
		/>
		<Field
			id="usernameField"
			type="text"
			name="username"
			placeholder="Username"
			value={data.username}
			disabled={true}
		/>
		<Field
			id="2faField"
			type="text"
			name="2faEnabled"
			placeholder="2FA Enabled"
			value={data.twoFactor
				? "Two Factor Enabled"
				: "Two Factor Disabled"}
			disabled={true}
		/>
	</div>
	<div class="containerDiv">
		<Group>
			<Button id="toggle2FAButton">Toggle 2FA</Button>
		</Group>
		<Group>
			<Button id="addPasskeyButton">Add Passkey</Button>
		</Group>
		<Group>
			<Link href="/logout">Log Out</Link>
		</Group>
	</div>
</Layout>
<style>
	.containerDiv {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 0.5rem;
		width: 80%;
	}
</style>
}
<script is:inline define:vars={{data}}>
	const button = document.getElementById("toggle2FAButton")
	const field = document.getElementById("2faField");
	if (button) {
		button.addEventListener("click",async ()=>{
			let localError = undefined;
			try {
				const resp = await fetch("/two-factor",{
					credentials: "include",
					method: "PATCH",
					headers: {
						"Content-Type": "application/json"
					},
					body: JSON.stringify({
						isEnabled: !(data.twoFactor)
					})
				})
				if (resp.ok) {
					data.twoFactor = !data.twoFactor;
					FireToast({
						text: "Successfully turned Two Factor Authentication "+(data.twoFactor ? "On":"Off"),
						icon: "success"
					});
					if (field) {
						field.value = data.twoFactor ? "Two Factor Enabled" : "Two Factor Disabled";
					}
				} else {
					const err = await resp.json();
					localError = err.error;
				}
			} catch (err) {
				if (err && typeof err == "string") {
					localError = err;
				} else if (
					err &&
					typeof err == "object" &&
					!Array.isArray(err) &&
					"message" in err &&
					typeof err.message == "string"
				) {
					localError = err.message;
				} else {
					localError = "Uknown Error Occured.";
				}
			}
			if (localError) {
				FireToast({text: localError, icon: "error"})
			}
		})
	}
</script>
<script is:inline>
	const passKeyButton = document.getElementById("addPasskeyButton")
	if (passKeyButton) {
		passKeyButton.addEventListener("click",async()=>{
			let localError = undefined;
			try {
				const resp = await fetch("/passkeys/register/generate-options",{
					credentials: "include",
					method: "GET"
				})
				if (resp.ok) {
					const data = await resp.json();
					const message = data.message;
					try {
						const attResp = await SimpleWebAuthnBrowser.startRegistration(message)
						const verificationResp = await fetch('/passkeys/register/verify', {
							method: 'POST',
							headers: {
								'Content-Type': 'application/json',
								'Webauthn-Options': resp.headers.get("Webauthn-Options"),
							},
							body: JSON.stringify(attResp),
						});
						const data = await verificationResp.json();
						if (verificationResp.ok && data && data.message?.verified) {
							FireToast({text: "Passkey Successfully Added", icon: "success"});
						} else {
							localError = data.error;
							if (!localError) localError = "An Unknown Error Occured";
						}
					} catch (error) {
						if (error.name === "NotAllowedError") {
							error.message = "Could Not Add Passkey.";
						}
						else if (error.name === 'InvalidStateError') {
							error.message = 'Authenticator was probably already registered by user';
						}
						throw error;
					}
				} else {
					const err = await resp.json();
					localError = err.error;
				}
			} catch (err) {
				if (err && typeof err == "string") {
					localError = err;
				} else if (
					err &&
					typeof err == "object" &&
					!Array.isArray(err) &&
					"message" in err &&
					typeof err.message == "string"
				) {
					localError = err.message;
				} else {
					localError = "Uknown Error Occured.";
				}
			}
			if (localError) {
				FireToast({text: localError, icon: "error"})
			}
		})
	}
</script>